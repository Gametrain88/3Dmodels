<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Model Viewer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- GLTFLoader is an example, you might need others for different formats -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <style>
        /* Apply inter font family */
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            overflow: hidden; /* Hide scrollbars */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background-color: #f0f2f5; /* Light gray background */
        }
        canvas {
            display: block;
            background-color: #e0e6ed; /* Slightly darker gray for canvas background */
            border-radius: 12px; /* Rounded corners for the canvas */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Soft shadow */
            max-width: 90vw; /* Max width to fit mobile screens */
            max-height: 80vh; /* Max height to fit mobile screens */
            width: 100%; /* Make canvas responsive within its container */
            height: 100%; /* Make canvas responsive within its container */
        }
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            width: 100%;
            max-width: 800px; /* Limit container width for better aesthetics */
            height: 100%; /* Ensure container takes full height */
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        .info-box {
            background-color: #fff;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            margin-top: 20px;
            text-align: center;
            font-size: 0.9rem;
            color: #555;
            width: 100%;
            max-width: 400px;
        }
        .controls {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }
        input[type="file"] {
            display: none; /* Hide default file input */
        }
        .custom-file-upload {
            background-color: #4CAF50; /* Green */
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            text-align: center;
            font-weight: bold;
        }
        .custom-file-upload:hover {
            background-color: #45a049;
        }
        .url-input-group {
            display: flex;
            gap: 10px;
            width: 100%;
            max-width: 400px;
        }
        .url-input-group input[type="text"] {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 0.9rem;
        }
        .url-input-group button {
            background-color: #007bff; /* Blue */
            color: white;
            padding: 8px 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            font-weight: bold;
            border: none;
        }
        .url-input-group button:hover {
            background-color: #0056b3;
        }
        .message-box {
            background-color: #ffe0b2; /* Light orange for warnings/info */
            color: #e65100; /* Dark orange text */
            padding: 10px 15px;
            border-radius: 8px;
            margin-top: 10px;
            text-align: center;
            font-size: 0.85rem;
            display: none; /* Hidden by default */
        }
        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin-top: 15px;
            display: none; /* Hidden by default */
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="container">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Interactive 3D Model Viewer</h1>
        <canvas id="threeJsCanvas"></canvas>
        <div class="controls">
            <input type="file" id="modelFileInput" accept=".gltf,.glb" />
            <label for="modelFileInput" class="custom-file-upload">
                Upload GLTF/GLB Model
            </label>
            <div class="url-input-group">
                <input type="text" id="modelUrlInput" placeholder="Enter GLTF/GLB URL (e.g., https://example.com/model.glb)">
                <button id="loadUrlButton">Load from URL</button>
            </div>
            <div id="messageBox" class="message-box"></div>
            <div id="loadingSpinner" class="loading-spinner"></div>
        </div>
        <div class="info-box">
            Click and drag your mouse to rotate the camera. Upload your own GLTF/GLB 3D model or load from a URL!
        </div>
    </div>

    <script>
        let scene, camera, renderer, currentModel;
        let isDragging = false;
        let previousMouseX = 0;
        let previousMouseY = 0;
        let messageBox, loadingSpinner;
        let modelUrlInput, loadUrlButton;

        // Function to initialize the 3D scene
        function init() {
            // Get the canvas element
            const canvas = document.getElementById('threeJsCanvas');
            messageBox = document.getElementById('messageBox');
            loadingSpinner = document.getElementById('loadingSpinner');
            modelUrlInput = document.getElementById('modelUrlInput');
            loadUrlButton = document.getElementById('loadUrlButton');

            // 1. Create a Scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xe0e6ed); // Match canvas background for consistency

            // 2. Create a Camera
            // PerspectiveCamera(fov, aspect, near, far)
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // Changed near plane to 0.1
            camera.position.z = 5; // Initial camera position, will be adjusted dynamically
            camera.lookAt(0,0,0); // Ensure camera looks at the center initially

            // 3. Create a Renderer
            renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
            // Set initial size of the renderer
            resizeRenderer();

            // 4. Add Lights to the scene
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7); // Increased intensity
            scene.add(ambientLight);

            const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.6);
            directionalLight1.position.set(5, 5, 5).normalize();
            scene.add(directionalLight1);

            const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4);
            directionalLight2.position.set(-5, -5, -5).normalize();
            scene.add(directionalLight2);

            // Add event listeners for mouse interaction
            canvas.addEventListener('mousedown', onMouseDown);
            canvas.addEventListener('mouseup', onMouseUp);
            canvas.addEventListener('mousemove', onMouseMove);
            canvas.addEventListener('mouseleave', onMouseUp); // Stop dragging if mouse leaves canvas

            // Add event listener for window resizing
            window.addEventListener('resize', onWindowResize);

            // Add event listener for file input
            document.getElementById('modelFileInput').addEventListener('change', onModelFileChange);

            // Add event listener for URL loading button
            loadUrlButton.addEventListener('click', () => {
                const url = modelUrlInput.value.trim();
                if (url) {
                    loadModelFromUrl(url);
                } else {
                    showMessage('Please enter a valid URL.', true);
                }
            });

            // Load a default cube initially
            loadDefaultCube();
        }

        // Function to display messages to the user
        function showMessage(message, isError = false) {
            messageBox.textContent = message;
            messageBox.style.display = 'block';
            messageBox.style.backgroundColor = isError ? '#ffcdd2' : '#ffe0b2'; // Red for error, orange for info
            messageBox.style.color = isError ? '#d32f2f' : '#e65100'; // Darker text colors
            // Hide after a few seconds
            setTimeout(() => {
                messageBox.style.display = 'none';
            }, 5000);
        }

        // Function to show/hide loading spinner
        function showLoading(show) {
            loadingSpinner.style.display = show ? 'block' : 'none';
        }

        // Function to dynamically adjust camera position to frame the model
        function frameModel(model) {
            if (!model) return;

            const box = new THREE.Box3().setFromObject(model);
            const sphere = new THREE.Sphere();
            box.getBoundingSphere(sphere);

            // Calculate distance needed to fit the sphere in view
            const fov = camera.fov * (Math.PI / 180); // convert fov to radians
            let distance = sphere.radius / Math.sin(fov / 2);
            distance *= 1.2; // Add some padding around the model

            // Set camera position to frame the model
            camera.position.set(0, 0, distance);
            camera.lookAt(0, 0, 0); // Ensure camera looks at the centered model
            camera.updateProjectionMatrix(); // Update camera projection after changing position
        }

        // Load a default cube when the app starts
        function loadDefaultCube() {
            // Remove existing model if any
            if (currentModel) {
                scene.remove(currentModel);
                currentModel = null;
            }
            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const material = new THREE.MeshStandardMaterial({ color: 0x007bff, roughness: 0.5, metalness: 0.1 });
            currentModel = new THREE.Mesh(geometry, material);
            scene.add(currentModel);

            frameModel(currentModel); // Frame the default cube
            showMessage('Default cube loaded. Upload your own model or load from a URL!');
        }

        // Function to handle the selected model file (local upload)
        function onModelFileChange(event) {
            const file = event.target.files[0];
            if (!file) {
                return;
            }

            // Check file extension
            const fileName = file.name.toLowerCase();
            if (!fileName.endsWith('.gltf') && !fileName.endsWith('.glb')) {
                showMessage('Please select a .gltf or .glb file.', true);
                return;
            }

            showLoading(true);
            showMessage('Loading model...');

            const reader = new FileReader();
            reader.onload = (e) => {
                const loader = new THREE.GLTFLoader();
                loader.parse(e.target.result, '', (gltf) => {
                    handleModelLoaded(gltf.scene, file.name);
                }, (error) => {
                    console.error('Error parsing GLTF model:', error);
                    showMessage(`Error parsing model: ${error.message || 'Check console for details.'}`, true);
                    showLoading(false);
                });
            };
            reader.onerror = (error) => {
                console.error('FileReader error:', error);
                showMessage('Error reading file.', true);
                showLoading(false);
            };
            reader.readAsArrayBuffer(file); // Read as ArrayBuffer for GLTFLoader
        }

        // Function to load a model from a URL
        function loadModelFromUrl(url) {
            // Check if it's a valid GLTF/GLB URL
            const urlLower = url.toLowerCase();
            if (!urlLower.endsWith('.gltf') && !urlLower.endsWith('.glb')) {
                showMessage('The URL must point to a .gltf or .glb file.', true);
                return;
            }

            showLoading(true);
            showMessage('Loading model from URL...');

            const loader = new THREE.GLTFLoader();
            loader.load(url, (gltf) => {
                handleModelLoaded(gltf.scene, url);
            }, undefined, (error) => { // Progress callback is optional, error callback is 4th argument
                console.error('Error loading GLTF model from URL:', error);
                let errorMessage = `Error loading model from URL: ${error.message || 'Network or CORS issue.'}`;
                if (error && error.target && error.target.status === 0) {
                    errorMessage += ' This might be due to a CORS policy blocking the request. Ensure the server hosting the model allows cross-origin requests.';
                }
                showMessage(errorMessage, true);
                showLoading(false);
            });
        }

        // Common function to handle a loaded model (from file or URL)
        function handleModelLoaded(model, name) {
            // Remove existing model if any
            if (currentModel) {
                scene.remove(currentModel);
                currentModel = null;
            }

            currentModel = model;
            scene.add(currentModel);

            // Center the model at the origin (0,0,0)
            const box = new THREE.Box3().setFromObject(currentModel);
            const center = box.getCenter(new THREE.Vector3());
            currentModel.position.sub(center);

            // Scale the model to a reasonable size based on its dimensions
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            const desiredSize = 2; // Target size for the model
            const scaleFactor = desiredSize / maxDim;
            currentModel.scale.set(scaleFactor, scaleFactor, scaleFactor);

            // After centering and scaling, frame the model with the camera
            frameModel(currentModel);

            showMessage(`Model "${name.split('/').pop()}" loaded successfully!`); // Show only filename or last part of URL
            showLoading(false);
        }


        // Function to handle window resizing
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            resizeRenderer();
            // Re-frame the model on resize to ensure it stays centered
            frameModel(currentModel);
        }

        // Function to resize the renderer based on window dimensions
        function resizeRenderer() {
            // Set canvas size to be responsive
            const container = document.querySelector('.container');
            // Use clientWidth and clientHeight for the container's dimensions
            let width = container.clientWidth;
            let height = container.clientHeight * 0.7; // Allocate 70% of container height to canvas

            // Ensure canvas is not too small and respects max-width/height
            width = Math.min(width, window.innerWidth * 0.9);
            height = Math.min(height, window.innerHeight * 0.8);

            renderer.setSize(width, height);
            renderer.setPixelRatio(window.devicePixelRatio); // Handle high-DPI screens
        }


        // Animation loop
        function animate() {
            requestAnimationFrame(animate); // Request the next frame

            // Rotate the current model (either cube or loaded model)
            if (currentModel) {
                currentModel.rotation.y += 0.005;
            }

            renderer.render(scene, camera); // Render the scene with the camera
        }

        // Mouse interaction handlers for camera rotation
        function onMouseDown(event) {
            // Standard behavior: dragging starts when mouse is pressed
            isDragging = true;
            previousMouseX = event.clientX;
            previousMouseY = event.clientY;
        }

        function onMouseUp() {
            // Standard behavior: dragging stops when mouse is released
            isDragging = false;
        }

        function onMouseMove(event) {
            if (!isDragging) return;

            const deltaX = event.clientX - previousMouseX;
            const deltaY = event.clientY - previousMouseY;

            const rotationSpeed = 0.005;

            // Invert the deltas for inverted controls (this was kept from previous request)
            const invertedDeltaX = -deltaX;
            const invertedDeltaY = -deltaY;

            // Simple camera orbit around the origin (0,0,0)
            const angleX = invertedDeltaX * rotationSpeed; // Horizontal rotation
            const angleY = invertedDeltaY * rotationSpeed; // Vertical rotation

            const axisX = new THREE.Vector3(0, 1, 0); // Rotate around world Y-axis for horizontal movement
            const axisY = new THREE.Vector3().crossVectors(camera.position, axisX).normalize(); // Rotate around axis perpendicular to camera position and world Y-axis for vertical movement

            const quaternionX = new THREE.Quaternion().setFromAxisAngle(axisX, angleX);
            const quaternionY = new THREE.Quaternion().setFromAxisAngle(axisY, angleY);

            // Apply rotations
            camera.position.applyQuaternion(quaternionX);
            camera.position.applyQuaternion(quaternionY);

            camera.lookAt(0, 0, 0); // Always look at the origin

            previousMouseX = event.clientX;
            previousMouseY = event.clientY;
        }

        // Initialize the scene and start the animation when the window loads
        window.onload = function () {
            init();
            animate();
            resizeRenderer(); // Call resize immediately after init
            // Set initial state for standard controls: dragging is inactive by default
            isDragging = false;
        };
    </script>
</body>
</html>
